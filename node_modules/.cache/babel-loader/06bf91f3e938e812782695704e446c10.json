{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLineNumber = exports.getEditorBounds = exports.clearInlineStyles = exports.isGreaterThan = exports.atomicBlockExists = exports.removeBlockFromMap = exports.getSelectionInfo = void 0;\n\nvar draft_js_1 = require(\"draft-js\");\n/**\n * Get the current selection details\n */\n\n\nvar getSelectionInfo = function (editorState) {\n  var selection = editorState.getSelection();\n  var startOffset = selection.getStartOffset();\n  var currentContent = editorState.getCurrentContent();\n  var contentBlock = currentContent.getBlockForKey(selection.getStartKey());\n  var currentStyle = editorState.getCurrentInlineStyle();\n  var linkKey = contentBlock.getEntityAt(startOffset);\n  var entityType = \"\";\n\n  if (linkKey) {\n    var linkInstance = currentContent.getEntity(linkKey);\n    entityType = linkInstance.getType();\n  }\n\n  return {\n    inlineStyle: currentStyle,\n    blockType: contentBlock.getType(),\n    entityType: entityType,\n    linkKey: linkKey,\n    block: contentBlock\n  };\n};\n\nexports.getSelectionInfo = getSelectionInfo;\n/**\n * Remove a block from the ContentState\n */\n\nvar removeBlockFromMap = function (editorState, block) {\n  var contentState = editorState.getCurrentContent();\n  var removeBlockContentState = draft_js_1.Modifier.removeRange(contentState, new draft_js_1.SelectionState({\n    anchorKey: block.getKey(),\n    anchorOffset: 0,\n    focusKey: block.getKey(),\n    focusOffset: block.getLength()\n  }), 'backward');\n  var blockMap = removeBlockContentState.getBlockMap().delete(block.getKey());\n  return removeBlockContentState.merge({\n    blockMap: blockMap,\n    selectionAfter: contentState.getSelectionAfter()\n  });\n};\n\nexports.removeBlockFromMap = removeBlockFromMap;\n\nvar atomicBlockExists = function (name, controls) {\n  if (!controls) {\n    return undefined;\n  }\n\n  return controls.find(function (control) {\n    return control.type === \"atomic\" && control.name === name && control.atomicComponent !== undefined;\n  });\n};\n\nexports.atomicBlockExists = atomicBlockExists;\n\nvar isGreaterThan = function (value, maxValue) {\n  if (!maxValue) {\n    return false;\n  }\n\n  return value > maxValue;\n};\n\nexports.isGreaterThan = isGreaterThan;\n\nvar clearInlineStyles = function (editorState, customStyles) {\n  var styles = ['BOLD', 'ITALIC', 'UNDERLINE'];\n\n  if (customStyles) {\n    styles = styles.concat(Object.getOwnPropertyNames(customStyles));\n  }\n\n  return styles.reduce(function (newContentState, style) {\n    return draft_js_1.Modifier.removeInlineStyle(newContentState, editorState.getSelection(), style);\n  }, editorState.getCurrentContent());\n};\n\nexports.clearInlineStyles = clearInlineStyles;\n\nvar getEditorBounds = function (editor) {\n  var fakeClientRect = (0, draft_js_1.getVisibleSelectionRect)(window);\n  return {\n    selectionRect: fakeClientRect ? {\n      top: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.top,\n      left: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.left\n    } : null,\n    editorRect: editor.getBoundingClientRect()\n  };\n};\n\nexports.getEditorBounds = getEditorBounds;\n\nvar getLineNumber = function (editorState) {\n  var currentBlockKey = editorState.getSelection().getStartKey();\n  return editorState.getCurrentContent().getBlockMap().keySeq().findIndex(function (k) {\n    return k === currentBlockKey;\n  });\n};\n\nexports.getLineNumber = getLineNumber;","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLineNumber = exports.getEditorBounds = exports.clearInlineStyles = exports.isGreaterThan = exports.atomicBlockExists = exports.removeBlockFromMap = exports.getSelectionInfo = void 0;\nvar draft_js_1 = require(\"draft-js\");\n/**\n * Get the current selection details\n */\nvar getSelectionInfo = function (editorState) {\n    var selection = editorState.getSelection();\n    var startOffset = selection.getStartOffset();\n    var currentContent = editorState.getCurrentContent();\n    var contentBlock = currentContent.getBlockForKey(selection.getStartKey());\n    var currentStyle = editorState.getCurrentInlineStyle();\n    var linkKey = contentBlock.getEntityAt(startOffset);\n    var entityType = \"\";\n    if (linkKey) {\n        var linkInstance = currentContent.getEntity(linkKey);\n        entityType = linkInstance.getType();\n    }\n    return {\n        inlineStyle: currentStyle,\n        blockType: contentBlock.getType(),\n        entityType: entityType,\n        linkKey: linkKey,\n        block: contentBlock\n    };\n};\nexports.getSelectionInfo = getSelectionInfo;\n/**\n * Remove a block from the ContentState\n */\nvar removeBlockFromMap = function (editorState, block) {\n    var contentState = editorState.getCurrentContent();\n    var removeBlockContentState = draft_js_1.Modifier.removeRange(contentState, new draft_js_1.SelectionState({\n        anchorKey: block.getKey(),\n        anchorOffset: 0,\n        focusKey: block.getKey(),\n        focusOffset: block.getLength(),\n    }), 'backward');\n    var blockMap = removeBlockContentState.getBlockMap().delete(block.getKey());\n    return removeBlockContentState.merge({\n        blockMap: blockMap,\n        selectionAfter: contentState.getSelectionAfter()\n    });\n};\nexports.removeBlockFromMap = removeBlockFromMap;\nvar atomicBlockExists = function (name, controls) {\n    if (!controls) {\n        return undefined;\n    }\n    return controls.find(function (control) {\n        return control.type === \"atomic\" &&\n            control.name === name &&\n            control.atomicComponent !== undefined;\n    });\n};\nexports.atomicBlockExists = atomicBlockExists;\nvar isGreaterThan = function (value, maxValue) {\n    if (!maxValue) {\n        return false;\n    }\n    return value > maxValue;\n};\nexports.isGreaterThan = isGreaterThan;\nvar clearInlineStyles = function (editorState, customStyles) {\n    var styles = ['BOLD', 'ITALIC', 'UNDERLINE'];\n    if (customStyles) {\n        styles = styles.concat(Object.getOwnPropertyNames(customStyles));\n    }\n    return styles.reduce(function (newContentState, style) { return (draft_js_1.Modifier.removeInlineStyle(newContentState, editorState.getSelection(), style)); }, editorState.getCurrentContent());\n};\nexports.clearInlineStyles = clearInlineStyles;\nvar getEditorBounds = function (editor) {\n    var fakeClientRect = (0, draft_js_1.getVisibleSelectionRect)(window);\n    return {\n        selectionRect: fakeClientRect ? {\n            top: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.top,\n            left: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.left\n        } : null,\n        editorRect: editor.getBoundingClientRect()\n    };\n};\nexports.getEditorBounds = getEditorBounds;\nvar getLineNumber = function (editorState) {\n    var currentBlockKey = editorState.getSelection().getStartKey();\n    return editorState.getCurrentContent().getBlockMap()\n        .keySeq().findIndex(function (k) { return k === currentBlockKey; });\n};\nexports.getLineNumber = getLineNumber;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}